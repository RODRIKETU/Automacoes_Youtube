{
  "name": "youtube_otimizado_mysql",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "start-youtube-automation",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-17000, 300],
      "id": "webhook-trigger",
      "name": "Webhook Início"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM youtube_temas WHERE id = ? AND ativo = TRUE",
        "additionalFields": {
          "queryParameters": "=[\"{{ $json.tema_id }}\"]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-16700, 300],
      "id": "busca-tema-mysql",
      "name": "Busca Tema MySQL"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "project-id-gen",
              "name": "project_id", 
              "value": "={{ $('SETUP').item.json.tema_nome.toLowerCase().replace(/[^a-z0-9]/g, '_') + '_' + Date.now() }}",
              "type": "string"
            },
            {
              "id": "tema-id-proj",
              "name": "tema_id",
              "value": "={{ $('SETUP').item.json.tema_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-16800, 544],
      "id": "projeto-id-generator",
      "name": "PROJETO ID"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "tema-info",
              "name": "tema_id",
              "value": "={{ $('Webhook Início').item.json.tema_id }}",
              "type": "number"
            },
            {
              "id": "tema-nome",
              "name": "tema_nome",
              "value": "={{ $('Busca Tema MySQL').item.json.nome }}",
              "type": "string"
            },
            {
              "id": "tema-prompt",
              "name": "prompt_roteiro",
              "value": "={{ $('Busca Tema MySQL').item.json.prompt_roteiro }}",
              "type": "string"
            },
            {
              "id": "tema-imagens",
              "name": "prompt_imagens",
              "value": "={{ $('Busca Tema MySQL').item.json.prompt_imagens }}",
              "type": "string"
            },
            {
              "id": "tema-tags",
              "name": "tags_sugeridas",
              "value": "={{ $('Busca Tema MySQL').item.json.tags_sugeridas }}",
              "type": "string"
            },
            {
              "id": "tema-categoria",
              "name": "categoria_youtube",
              "value": "={{ $('Busca Tema MySQL').item.json.categoria_youtube }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-16400, 544],
      "id": "setup-inicial",
      "name": "SETUP"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('SETUP').item.json.prompt_roteiro }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 1.4,
      "position": [-16000, 544],
      "id": "gera-roteiro",
      "name": "Gera Roteiro"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "roteiro-clean",
              "name": "roteiro",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-15600, 544],
      "id": "roteiro-set",
      "name": "ROTEIRO"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO youtube_projects (project_id, tema_id, title, status) VALUES (?, ?, ?, 'iniciado')",
        "additionalFields": {
          "queryParameters": "=[\"{{ $('PROJETO ID').item.json.project_id }}\", \"{{ $('PROJETO ID').item.json.tema_id }}\", \"{{ $('SETUP').item.json.tema_nome }} - {{ Date.now() }}\"]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-15200, 544],
      "id": "salva-projeto-mysql",
      "name": "Salva Projeto MySQL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.elevenlabs.io/v1/text-to-speech/y3X5crcIDtFawPx7bcNq/stream",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $('ROTEIRO').item.json.roteiro }}\",\n  \"model_id\": \"eleven_multilingual_v2\",\n  \"voice_settings\": {\n    \"stability\": 0.7,\n    \"similarity_boost\": 0.9\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-13088, 560],
      "id": "http-elevenlabs",
      "name": "HTTP ElevenLabs"
    },
    {
      "parameters": {
        "jsCode": "// Converte o áudio binário para base64 e salva no MySQL\nconst audioBase64 = $input.first().binary.data.data;\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'audio_narracao', 'narracao.mp3', audioBase64, 'audio/mpeg']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-12800, 560],
      "id": "prepare-audio-mysql",
      "name": "Prepara Áudio para MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-12500, 560],
      "id": "salva-audio-mysql",
      "name": "Salva Áudio MySQL"
    },
    {
      "parameters": {
        "jsCode": "// Converte imagem para base64 e salva no MySQL\nconst imageBase64 = $input.first().binary.data.data;\nconst projectId = $('PROJETO ID').first().json.project_id;\nconst imageName = $('Limpa o JSON').item.json.image || `image_${$itemIndex}`;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'imagem', `${imageName}.jpg`, imageBase64, 'image/jpeg']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-10992, 240],
      "id": "prepare-image-mysql",
      "name": "Prepara Imagem para MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-10700, 240],
      "id": "salva-image-mysql",
      "name": "Salva Imagem MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT file_data FROM youtube_files WHERE project_id = ? AND file_type = 'audio_narracao' LIMIT 1",
        "additionalFields": {
          "queryParameters": "=[\"{{ $('PROJETO ID').first().json.project_id }}\"]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-8608, 704],
      "id": "busca-audio-mysql",
      "name": "Busca Áudio MySQL"
    },
    {
      "parameters": {
        "jsCode": "// Converte base64 de volta para binário para processamento\nconst audioBase64 = $input.first().json.file_data;\n\nreturn [{\n  binary: {\n    data: {\n      data: audioBase64,\n      mimeType: 'audio/mpeg',\n      fileName: 'narracao.mp3'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-8400, 704],
      "id": "converte-audio-binario",
      "name": "Converte Áudio para Binário"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://speech.googleapis.com/v1/speech:recognize",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer [CONFIGURE_NO_N8N]"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "config",
              "value": {
                "encoding": "MP3",
                "sampleRateHertz": 44100,
                "languageCode": "pt-BR",
                "enableWordTimeOffsets": true,
                "enableWordConfidence": true,
                "model": "latest_long"
              }
            },
            {
              "name": "audio",
              "value": {
                "content": "={{ $binary.data.data }}"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-8176, 704],
      "id": "transcreve-google-speech",
      "name": "Transcreve no Google Speech"
    },
    {
      "parameters": {
        "jsCode": "// Salva arquivo de legenda diretamente no MySQL\nconst projectId = $('PROJETO ID').first().json.project_id;\nconst legendaBase64 = $input.first().binary.data.data;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'legenda', 'legenda.ass', legendaBase64, 'text/x-ass']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7760, 704],
      "id": "salva-legenda-mysql",
      "name": "Salva Legenda MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-7500, 704],
      "id": "executa-salva-legenda",
      "name": "Executa Salva Legenda"
    },
    {
      "parameters": {
        "jsCode": "// Baixa músicas e salva diretamente no MySQL\nconst musicaBase64 = $input.first().binary.data.data;\nconst projectId = $('PROJETO ID').first().json.project_id;\nconst musicaIndex = $itemIndex;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'musica', `musica${musicaIndex}.mp3`, musicaBase64, 'audio/mpeg']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-5840, 704],
      "id": "prepare-musica-mysql",
      "name": "Prepara Música MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-5600, 704],
      "id": "salva-musica-mysql",
      "name": "Salva Música MySQL"
    },
    {
      "parameters": {
        "jsCode": "// Busca todas as músicas do projeto e gera comando FFmpeg\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nreturn [{\n  json: {\n    operation: 'select',\n    query: `SELECT file_name, file_data FROM youtube_files WHERE project_id = ? AND file_type = 'musica' ORDER BY file_name`,\n    values: [projectId]\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-5300, 704],
      "id": "busca-musicas-mysql",
      "name": "Busca Músicas MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-5000, 704],
      "id": "executa-busca-musicas",
      "name": "Executa Busca Músicas"
    },
    {
      "parameters": {
        "jsCode": "// Processa músicas direto da memória usando FFmpeg com pipes\nconst musicas = $input.all();\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nif (musicas.length === 1) {\n  // Uma só música - apenas ajusta volume\n  const musicaData = musicas[0].json.file_data;\n  const comando = `echo '${musicaData}' | base64 -d | ffmpeg -i pipe:0 -filter:a \"volume=0.5\" -f mp3 pipe:1 | base64`;\n  \n  return [{\n    json: {\n      ffmpeg_command: comando,\n      output_type: 'musica_final'\n    }\n  }];\n} else {\n  // Múltiplas músicas - precisa unir\n  let comando = 'ffmpeg ';\n  \n  // Adiciona inputs via pipe\n  for (let i = 0; i < musicas.length; i++) {\n    comando += `-i <(echo '${musicas[i].json.file_data}' | base64 -d) `;\n  }\n  \n  // Filter complex para unir\n  let filterComplex = '';\n  for (let i = 0; i < musicas.length; i++) {\n    filterComplex += `[${i}:a]`;\n  }\n  filterComplex += `concat=n=${musicas.length}:v=0:a=1[united]`;\n  \n  comando += `-filter_complex \"${filterComplex};[united]volume=0.5[out]\" -map \"[out]\" -f mp3 pipe:1 | base64`;\n  \n  return [{\n    json: {\n      ffmpeg_command: comando,\n      output_type: 'musica_final'\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-4700, 704],
      "id": "processa-musicas-memoria",
      "name": "Processa Músicas na Memória"
    },
    {
      "parameters": {
        "jsCode": "// Gera vídeo final processando tudo na memória\nconst projectId = $('PROJETO ID').first().json.project_id;\n\n// Busca todos os arquivos necessários\nreturn [{\n  json: {\n    operation: 'select_all',\n    query: `SELECT file_type, file_data, mime_type FROM youtube_files WHERE project_id = ? AND file_type IN ('audio_narracao', 'imagem', 'legenda', 'musica')`,\n    values: [projectId]\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-4000, 704],
      "id": "busca-arquivos-video",
      "name": "Busca Arquivos para Vídeo"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-3700, 704],
      "id": "executa-busca-arquivos",
      "name": "Executa Busca Arquivos"
    },
    {
      "parameters": {
        "jsCode": "// Monta comando FFmpeg complexo para processar tudo na memória\nconst arquivos = $input.all();\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nlet narracaoData = '';\nlet legendaData = '';\nconst imagens = [];\nconst musicas = [];\n\n// Separa os arquivos por tipo\nfor (const arquivo of arquivos) {\n  switch (arquivo.json.file_type) {\n    case 'audio_narracao':\n      narracaoData = arquivo.json.file_data;\n      break;\n    case 'legenda':\n      legendaData = arquivo.json.file_data;\n      break;\n    case 'imagem':\n      imagens.push(arquivo.json.file_data);\n      break;\n    case 'musica':\n      musicas.push(arquivo.json.file_data);\n      break;\n  }\n}\n\n// Calcula duração estimada do áudio (assumindo 128kbps MP3)\nconst estimatedDuration = Math.ceil(narracaoData.length * 6 / (128 * 1024 * 8));\nconst frameDuration = estimatedDuration / imagens.length;\n\n// Comando FFmpeg complexo usando pipes e processamento na memória\nlet comando = 'bash -c \"';\n\n// Cria pipes nomeados temporários\ncomando += 'mkfifo /tmp/narracao.mp3 /tmp/legenda.ass ';\nfor (let i = 0; i < imagens.length; i++) {\n  comando += `/tmp/img${i}.jpg `;\n}\nfor (let i = 0; i < musicas.length; i++) {\n  comando += `/tmp/music${i}.mp3 `;\n}\ncomando += '; ';\n\n// Alimenta os pipes em background\ncomando += `echo '${narracaoData}' | base64 -d > /tmp/narracao.mp3 & `;\ncomando += `echo '${legendaData}' | base64 -d > /tmp/legenda.ass & `;\n\nfor (let i = 0; i < imagens.length; i++) {\n  comando += `echo '${imagens[i]}' | base64 -d > /tmp/img${i}.jpg & `;\n}\n\nfor (let i = 0; i < musicas.length; i++) {\n  comando += `echo '${musicas[i]}' | base64 -d > /tmp/music${i}.mp3 & `;\n}\n\ncomando += 'wait; ';\n\n// Comando FFmpeg principal\ncomando += 'ffmpeg ';\n\n// Inputs das imagens\nfor (let i = 0; i < imagens.length; i++) {\n  comando += `-loop 1 -t ${frameDuration} -i /tmp/img${i}.jpg `;\n}\n\n// Input da narração\ncomando += '-i /tmp/narracao.mp3 ';\n\n// Inputs das músicas\nfor (let i = 0; i < musicas.length; i++) {\n  comando += `-i /tmp/music${i}.mp3 `;\n}\n\n// Filter complex para vídeo\nlet filterVideo = '';\nfor (let i = 0; i < imagens.length; i++) {\n  filterVideo += `[${i}:v]scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:(ow-iw)/2:(oh-ih)/2,setpts=PTS-STARTPTS+${i * frameDuration}/TB[v${i}]; `;\n}\n\nfilterVideo += imagens.map((_, i) => `[v${i}]`).join('') + `concat=n=${imagens.length}:v=1:a=0[vout]; `;\n\n// Filter para áudio (narração + música)\nconst audioInputs = musicas.length;\nlet filterAudio = `[${imagens.length}:a]`; // narração\nfor (let i = 0; i < audioInputs; i++) {\n  filterAudio += `[${imagens.length + 1 + i}:a]`;\n}\nfilterAudio += `amix=inputs=${audioInputs + 1}:duration=first:weights=1`;\nfor (let i = 0; i < audioInputs; i++) {\n  filterAudio += ' 0.3';\n}\nfilterAudio += '[aout]';\n\ncomando += `-filter_complex \"${filterVideo}${filterAudio}\" `;\ncomando += '-map \"[vout]\" -map \"[aout]\" ';\ncomando += `-vf \"ass=/tmp/legenda.ass\" `;\ncomando += '-c:v libx264 -c:a aac -shortest -f mp4 pipe:1 | base64; ';\n\n// Limpa arquivos temporários\ncomando += 'rm -f /tmp/narracao.mp3 /tmp/legenda.ass ';\nfor (let i = 0; i < imagens.length; i++) {\n  comando += `/tmp/img${i}.jpg `;\n}\nfor (let i = 0; i < musicas.length; i++) {\n  comando += `/tmp/music${i}.mp3 `;\n}\ncomando += '\"';\n\nreturn [{\n  json: {\n    ffmpeg_command: comando,\n    project_id: projectId\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-3400, 704],
      "id": "monta-comando-video-final",
      "name": "Monta Comando Vídeo Final"
    },
    {
      "parameters": {
        "command": "={{ $json.ffmpeg_command }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [-3100, 704],
      "id": "executa-ffmpeg-final",
      "name": "Executa FFmpeg Final"
    },
    {
      "parameters": {
        "jsCode": "// Salva vídeo final no MySQL\nconst videoBase64 = $input.first().json.stdout;\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'video_final', 'video_final.mp4', videoBase64, 'video/mp4']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-2800, 704],
      "id": "salva-video-final-mysql",
      "name": "Salva Vídeo Final MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-2500, 704],
      "id": "executa-salva-video-final",
      "name": "Executa Salva Vídeo Final"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT file_data FROM youtube_files WHERE project_id = ? AND file_type = 'video_final' LIMIT 1",
        "additionalFields": {
          "queryParameters": "=[\"{{ $('PROJETO ID').first().json.project_id }}\"]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [-2000, 704],
      "id": "busca-video-upload",
      "name": "Busca Vídeo para Upload"
    },
    {
      "parameters": {
        "jsCode": "// Converte base64 para binário para upload\nconst videoBase64 = $input.first().json.file_data;\n\nreturn [{\n  binary: {\n    data: {\n      data: videoBase64,\n      mimeType: 'video/mp4',\n      fileName: 'video_final.mp4'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1700, 704],
      "id": "converte-video-binario",
      "name": "Converte Vídeo para Binário"
    },
    {
      "parameters": {
        "jsCode": "// Salva thumbnail no MySQL\nconst thumbnailBase64 = $input.first().binary.data.data;\nconst projectId = $('PROJETO ID').first().json.project_id;\n\nreturn [{\n  json: {\n    operation: 'insert',\n    query: `INSERT INTO youtube_files (project_id, file_type, file_name, file_data, mime_type) VALUES (?, ?, ?, ?, ?)`,\n    values: [projectId, 'thumbnail', 'thumbnail.jpg', thumbnailBase64, 'image/jpeg']\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, -48],
      "id": "salva-thumbnail-mysql",
      "name": "Salva Thumbnail MySQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParameters": "={{ $json.values }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [2300, -48],
      "id": "executa-salva-thumbnail",
      "name": "Executa Salva Thumbnail"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM youtube_files WHERE project_id = ? AND created_at < DATE_SUB(NOW(), INTERVAL 7 DAY)",
        "additionalFields": {
          "queryParameters": "=[\"{{ $('PROJETO ID').first().json.project_id }}\"]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.5,
      "position": [2800, -48],
      "id": "limpa-arquivos-antigos",
      "name": "Limpa Arquivos Antigos"
    }
  ],
  "connections": {
    "Webhook Início": {
      "main": [
        [
          {
            "node": "Busca Tema MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Tema MySQL": {
      "main": [
        [
          {
            "node": "SETUP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SETUP": {
      "main": [
        [
          {
            "node": "PROJETO ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PROJETO ID": {
      "main": [
        [
          {
            "node": "Gera Roteiro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gera Roteiro": {
      "main": [
        [
          {
            "node": "ROTEIRO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ROTEIRO": {
      "main": [
        [
          {
            "node": "Salva Projeto MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salva Projeto MySQL": {
      "main": [
        [
          {
            "node": "HTTP ElevenLabs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP ElevenLabs": {
      "main": [
        [
          {
            "node": "Prepara Áudio para MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara Áudio para MySQL": {
      "main": [
        [
          {
            "node": "Salva Áudio MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Imagem para MySQL": {
      "main": [
        [
          {
            "node": "Salva Imagem MySQL", 
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Áudio MySQL": {
      "main": [
        [
          {
            "node": "Converte Áudio para Binário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Converte Áudio para Binário": {
      "main": [
        [
          {
            "node": "Transcreve no Google Speech",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salva Legenda MySQL": {
      "main": [
        [
          {
            "node": "Executa Salva Legenda",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Música MySQL": {
      "main": [
        [
          {
            "node": "Salva Música MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Músicas MySQL": {
      "main": [
        [
          {
            "node": "Executa Busca Músicas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa Busca Músicas": {
      "main": [
        [
          {
            "node": "Processa Músicas na Memória",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Arquivos para Vídeo": {
      "main": [
        [
          {
            "node": "Executa Busca Arquivos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa Busca Arquivos": {
      "main": [
        [
          {
            "node": "Monta Comando Vídeo Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monta Comando Vídeo Final": {
      "main": [
        [
          {
            "node": "Executa FFmpeg Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa FFmpeg Final": {
      "main": [
        [
          {
            "node": "Salva Vídeo Final MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salva Vídeo Final MySQL": {
      "main": [
        [
          {
            "node": "Executa Salva Vídeo Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Vídeo para Upload": {
      "main": [
        [
          {
            "node": "Converte Vídeo para Binário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salva Thumbnail MySQL": {
      "main": [
        [
          {
            "node": "Executa Salva Thumbnail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa Salva Thumbnail": {
      "main": [
        [
          {
            "node": "Limpa Arquivos Antigos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}
